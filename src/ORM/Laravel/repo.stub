<?php declare(strict_types=1);

namespace %%NAMESPACE%%;

use %%CLASS%%;
use Illuminate\Database\Connection;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use stdClass;

class %%RNAME%%
{
    private %%HNAME%% $hydrator;
    private Connection $db;
    private string $table = '%%TABLENAME%%';

    public function __construct(%%HNAME%% $hydrator, Connection $db)
    {
        $this->hydrator = $hydrator;
        $this->db = $db;
    }

    // Read -------------------------------------------------------------------

    public function findById(int $id): ?%%SHORTCLASS%%
    {
        $row = $this->db->table($this->table)->find($id);
        return $row ? $this->hydrate($row) : null;
    }

    public function findByIdMultiple(array $ids): Collection
    {
        $rows = $this->db->table($this->table)->whereIn('id', $ids)->get();
        return $this->hydrateCollection($rows);
    }

    public function findBySlug(string $slug, string $exclusion = '', string $column = 'slug'): ?%%SHORTCLASS%%
    {
        $row = $this->db->table($this->table)->where($column, $slug)->where($column, '!=', $exclusion)->first();
        return $row ? $this->hydrate($row) : null;
    }

    // Hydrate ----------------------------------------------------------------

    private function hydrate(stdClass $data): %%SHORTCLASS%%
    {
        return $this->hydrator->hydrate((array)$data);
    }

    /** @return %%SHORTCLASS%%[]|Collection */
    private function hydrateCollection(Collection $collection): Collection
    {
        return $collection->map(function (stdClass $data) {
            return $this->hydrate($data);
        });
    }

    /** @return LengthAwarePaginator|%%SHORTCLASS%%[] */
    private function hydrateLengthAwarePaginator(LengthAwarePaginator $paginator): LengthAwarePaginator
    {
        return $paginator->setCollection($this->hydrateCollection($paginator->getCollection()));
    }

    // Write ------------------------------------------------------------------

    public function persist(%%SHORTCLASS%% $model): int
    {
        $model->updated = now();
        $data = $this->hydrator->extract($model);
        if (is_null($model->id)) {
            return $this->db->table($this->table)->insertGetId($data);
        }
        $this->db->table($this->table)->where('id', $model->id)->update($data);
        return $model->id;
    }
}
